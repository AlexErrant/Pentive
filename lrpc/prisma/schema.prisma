// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("planetscaleDbUrl")
  relationMode = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model user {
  id                    String               @id @db.VarChar(21) // lowercase
  displayName           String               @db.VarChar(21) // cased as user input
  email                 String               @unique @db.VarChar(254)
  created               DateTime             @default(now())
  templateHistory       templateHistory[]
  templateComments      templateComment[]
  templateSubscriptions templateSubscriber[]
  notes                 note[]
  noteComments          noteComment[]
  noteSubscriptions     noteSubscriber[]
  posts                 post[]
  postComments          postComment[]
  postSubscriptions     postSubscriber[]
}

model template {
  id          Bytes                @id @db.Binary(16)
  created     DateTime             @default(now())
  updated     DateTime             @default(now())
  name        String               @db.VarChar(255)
  nook        String               @db.VarChar(21)
  nookRef     nook                 @relation(fields: [nook], references: [id])
  type        String               @db.Text // medTODO compress
  fields      String               @db.Text // medTODO compress
  css         String               @db.Text // medTODO compress
  history     templateHistory[]
  comments    templateComment[]
  ankiId      BigInt?              @db.UnsignedBigInt // should be its own table
  subscribers templateSubscriber[]
  notes       note[]

  @@index([ankiId])
  @@index([nook])
}

model templateComment {
  id         Bytes    @id @db.Binary(16)
  parentId   Bytes?   @db.Binary(16)
  templateId Bytes    @db.Binary(16)
  template   template @relation(fields: [templateId], references: [id])
  created    DateTime @default(now())
  updated    DateTime @default(now())
  text       String   @db.Text
  author     user     @relation(fields: [authorId], references: [id])
  authorId   String   @db.VarChar(21)
  history    String?  @db.Text
  votes      String   @db.Text
  level      Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([templateId])
}

model templateSubscriber {
  templateId Bytes    @db.Binary(16)
  template   template @relation(fields: [templateId], references: [id])
  userId     String   @db.VarChar(21)
  user       user     @relation(fields: [userId], references: [id])
  til        DateTime @default(now())

  @@id([templateId, userId])
  @@index([templateId])
  @@index([userId])
}

model templateHistory {
  templateId Bytes    @db.Binary(16)
  template   template @relation(fields: [templateId], references: [id])
  created    DateTime @default(now())

  name     String? @db.VarChar(255)
  author   user?   @relation(fields: [authorId], references: [id])
  authorId String? @db.VarChar(21)
  type     String? @db.VarChar(21)
  fields   String? @db.Text
  css      String? @db.Text

  @@id([templateId, created])
  @@index([templateId])
  @@index([authorId])
}

model note {
  id               Bytes    @id @db.Binary(16)
  templateId       Bytes    @db.Binary(16)
  template         template @relation(fields: [templateId], references: [id])
  created          DateTime @default(now())
  updated          DateTime @default(now())
  author           user     @relation(fields: [authorId], references: [id])
  authorId         String   @db.VarChar(21)
  fieldValues      String   @db.Text // medTODO compress
  fts              String   @db.Text
  tags             String   @db.Text
  subscribersCount Int      @default(0) @db.UnsignedSmallInt
  commentsCount    Int      @default(0) @db.UnsignedMediumInt

  history     noteHistory[]
  comments    noteComment[]
  ankiId      BigInt?          @db.UnsignedBigInt // should be its own table
  subscribers noteSubscriber[]

  @@index([authorId])
  @@index([ankiId])
  @@index([templateId])
  @@fulltext([fts])
}

model noteComment {
  id       Bytes    @id @db.Binary(16)
  parentId Bytes?   @db.Binary(16)
  noteId   Bytes    @db.Binary(16)
  note     note     @relation(fields: [noteId], references: [id])
  created  DateTime @default(now())
  updated  DateTime @default(now())
  text     String   @db.Text
  author   user     @relation(fields: [authorId], references: [id])
  authorId String   @db.VarChar(21)
  history  String?  @db.Text
  votes    String   @db.Text
  level    Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([noteId])
}

model noteSubscriber {
  noteId Bytes    @db.Binary(16)
  note   note     @relation(fields: [noteId], references: [id])
  userId String   @db.VarChar(21)
  user   user     @relation(fields: [userId], references: [id])
  til    DateTime @default(now())

  @@id([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

model noteHistory {
  noteId  Bytes    @db.Binary(16)
  note    note     @relation(fields: [noteId], references: [id])
  created DateTime @default(now())

  templateId  Bytes? @db.Binary(16)
  fieldValues String @db.Text
  tags        String @db.Text

  @@id([noteId, created])
  @@index([noteId])
}

model media_User {
  mediaHash Bytes  @db.Binary(32)
  userId    String @db.VarChar(21)

  @@id([mediaHash, userId])
  @@index([mediaHash])
}

model media_Entity {
  entityId  Bytes @db.Binary(16) // e.g. template, note, or comment that refers to said media
  i         Int   @db.UnsignedTinyInt
  mediaHash Bytes @db.Binary(32)

  @@id([entityId, i])
  @@index([mediaHash])
}

model nook {
  id          String     @id @db.VarChar(21) // lowercase
  displayName String     @db.VarChar(21) // cased as user input
  created     DateTime   @default(now())
  templates   template[]
  posts       post[]
  moderators  String     @db.Text
}

model post {
  id          Bytes            @id @db.Binary(16)
  title       String           @db.VarChar(255)
  text        String           @db.Text
  nook        String           @db.VarChar(21)
  nookRef     nook             @relation(fields: [nook], references: [id])
  author      user             @relation(fields: [authorId], references: [id])
  authorId    String           @db.VarChar(21)
  comments    postComment[]
  subscribers postSubscriber[]

  @@index([authorId])
  @@index([nook])
}

model postComment {
  id       Bytes    @id @db.Binary(16)
  parentId Bytes?   @db.Binary(16)
  postId   Bytes    @db.Binary(16)
  post     post     @relation(fields: [postId], references: [id])
  created  DateTime @default(now())
  updated  DateTime @default(now())
  text     String   @db.Text
  author   user     @relation(fields: [authorId], references: [id])
  authorId String   @db.VarChar(21)
  history  String?  @db.Text
  votes    String   @db.Text
  level    Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([postId])
}

model postSubscriber {
  postId Bytes    @db.Binary(16)
  post   post     @relation(fields: [postId], references: [id])
  userId String   @db.VarChar(21)
  user   user     @relation(fields: [userId], references: [id])
  til    DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}
