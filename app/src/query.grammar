@top Program { expression* }
@skip { whitespace }
@precedence { leftAssociate @left }

expression {
  !leftAssociate Not?
  (SimpleString | QuotedString | ParenthesizedExpression | Tag | Deck)
  (Or? expression)*
}

ParenthesizedExpression { "(" expression ")" }

@tokens {
  QuotedString { '"' char* '"' }
  // a char is any non-doublequote or forward-slash followed by a doublequote or forward-slash
  char {
         !["\\] |
    "\\" $["\\]
  }
  // a SimpleString is any series of characters that is not parentheses, colon, doublequote, or whitespace (as defined by the Unicode standard)
  SimpleString { ( ![():"\u0009\u000A\u000B\u000C\u000D\u0020\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000] )+ }
  whitespace { @whitespace+ }

  Not { "-" }
  @precedence { Not, SimpleString }
}

Deck { @specialize<SimpleString, "deck"> ":" ( SimpleString | QuotedString ) }
Tag  { @specialize<SimpleString, "tag">  ":" ( SimpleString | QuotedString ) }
Or   { @specialize<SimpleString, "OR"> }
