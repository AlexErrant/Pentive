@top Program { expression* }
@skip { whitespace }
@detectDelim
@precedence { unary @right } // https://www.ibm.com/docs/en/i/7.5?topic=operators-operator-precedence-associativity

expression[@dynamicPrecedence=0] {
  !unary Not?
  (string | Group | Label)
  ~x (Or? expression)*
}

stringExpression[@dynamicPrecedence=1] {
  !unary Not?
  string
  ~x (Or? stringExpression)*
}

idExpression[@dynamicPrecedence=2] {
  !unary Not?
  id
  ~x (Or? idExpression)*
}

stateEnumExpression[@dynamicPrecedence=3] {
  !unary Not?
  StateEnum
  ~x (Or? stateEnumExpression)*
}

StateEnum {
    enum<"normal">
  | enum<"buried">
  | enum<"userBuried">
  | enum<"schedulerBuried">
  | enum<"suspended">
}

kindEnumExpression[@dynamicPrecedence=3] {
  !unary Not?
  KindEnum
  ~x (Or? kindEnumExpression)*
}

KindEnum {
    enum<"new">
  | enum<"learn">
  | enum<"review">
  | enum<"relearn">
  | enum<"cram">
}

fieldValueExpression[@dynamicPrecedence=3] {
  !unary Not?
  ( string | FieldValueEnum )
  ~x (Or? fieldValueExpression)*
}

FieldValueEnum[@dynamicPrecedence=1] {
    enum<"exists">
  | enum<"missing">
}

Group { "(" expression ")" }

stateIs { kw<"state"> Is }
kindIs  { kw<"kind">  Is }
fieldIs { kw<"field"> Is FieldName Is }

Label {
    "(" Not? stringLabels     stringExpression ")" | stringLabels Not? string
  | "(" Not?     idLabels         idExpression ")" |     idLabels Not? id
  | "(" Not?      stateIs  stateEnumExpression ")" |      stateIs Not? StateEnum
  | "(" Not?       kindIs   kindEnumExpression ")" |       kindIs Not? KindEnum
  | "(" Not?      fieldIs fieldValueExpression ")" |      fieldIs Not? ( string | FieldValueEnum )
  | due
  | repsLapses
  | createdUpdated
  | reviewed
}

string {
  Regex
  | SimpleString
  | Quoted1
  | Quoted2
  | Number
  | Html
  | RawQuoted
  | RawHtml
}

id { SimpleString | Quoted1 | Quoted2 | Number | RawQuoted }

kw     <word> { @extend[@name={word}]<SimpleString, word> } // "keyword"
enum   <word> { @extend              <SimpleString, word> }
enumNum<word> { @extend              <Number      , word> }

stringLabels {
  ( kw<"tag">
  | kw<"noteTag">
  | kw<"cardTag">
  | kw<"template">
  | kw<"setting">
  ) Is
}

FieldName {
  Not?
  ( Regex | SimpleString | Quoted1 | Quoted2 | Number | RawQuoted )
}

idLabels {
  ( kw<"templateId">
  | kw<"cardId">
  | kw<"noteId">
  | kw<"settingId">
  ) Is
}

Or { @specialize<SimpleString, "OR"> | "," }

due {
  kw<"due">
  ( Is DueEnum
  | Is Not? Number
  | Comparison Date )
}

DueEnum { "true" | "false" }

createdUpdated {
  ( kw<"created">
  | kw<"noteCreated">
  | kw<"cardCreated">
  | kw<"edited">
  | kw<"noteEdited">
  | kw<"cardEdited"> )
  ( Is Not? Number
  | Comparison Date )
}

repsLapses {
  ( kw<"reps">
  | kw<"lapses">
  | kw<"tagCount">
  | kw<"cardTagCount">
  | kw<"noteTagCount"> )
  Comparison Number
}

reviewed {
  ( kw<"reviewed"> | kw<"firstReviewed"> )
  Comparison ( Not? Number | Date )
  ( Comparison RatingEnum ) ?
}

RatingEnum[@dynamicPrecedence=1] {
    enumNum<"1">
  | enumNum<"2">
  | enumNum<"3">
  | enumNum<"4">
  | enum<"again">
  | enum<"hard">
  | enum<"good">
  | enum<"easy">
}

Comparison { ":" | "=" | "<" | ">" | "<=" | ">=" }
Is { ":" | "=" }

// If you add characters that need escaping, also update 36E8AC4E-5658-443C-96F1-E131B231861C

@local tokens {
  SquareClose[openedBy=SquareOpen] { "]" }
  Dash { "-" }
  Char { ![\]-] }
}

@local tokens {
     Quoted1Close[@name=Close     ,openedBy=Quoted1Open] { "'" ("%" | "^" | "#")* }
     SquareOpen_1[@name=SquareOpen,closedBy=SquareClose] { "[" "^"? }
       Wildcard_1[@name=Wildcard                       ] { "*" }
      Wildcard1_1[@name=Wildcard1                      ] { "?" }
  @else Content_1[@name=Content]
}

@local tokens {
     Quoted2Close[@name=Close     ,openedBy=Quoted2Open] { '"' ("%" | "^" | "#")* }
     SquareOpen_2[@name=SquareOpen,closedBy=SquareClose] { "[" "^"? }
       Wildcard_2[@name=Wildcard                       ] { "*" }
      Wildcard1_2[@name=Wildcard1                      ] { "?" }
  @else Content_2[@name=Content]
}

@local tokens {
        HtmlClose[@name=Close     ,openedBy=HtmlOpen   ] { "`" ("%" | "^" | "#")* }
     SquareOpen_3[@name=SquareOpen,closedBy=SquareClose] { "[" "^"? }
       Wildcard_3[@name=Wildcard                       ] { "*" }
      Wildcard1_3[@name=Wildcard1                      ] { "?" }
  @else Content_3[@name=Content]
}

@skip {} {
  RawQuoted {
      RawQuoted1Open RawQuoted1Content RawQuoted1Close
    | RawQuoted2Open RawQuoted2Content RawQuoted2Close
  }
  RawHtml {
    RawHtmlOpen RawHtmlContent RawHtmlClose
  }
  Quoted1Open[closedBy=Quoted1Close,@name=Open] { ("%" | "^" | "#")* "'" }
  Quoted2Open[closedBy=Quoted2Close,@name=Open] { ("%" | "^" | "#")* '"' }
     HtmlOpen[closedBy=   HtmlClose,@name=Open] { ("%" | "^" | "#")* '`' }
  Quoted1 { Quoted1Open contentRoot_1 Quoted1Close }
  Quoted2 { Quoted2Open contentRoot_2 Quoted2Close }
  Html    {    HtmlOpen contentRoot_3    HtmlClose }

  contentRoot_1 { (Squared_1 | Wildcard_1 | Wildcard1_1 | Content_1)* }
  contentRoot_2 { (Squared_2 | Wildcard_2 | Wildcard1_2 | Content_2)* }
  contentRoot_3 { (Squared_3 | Wildcard_3 | Wildcard1_3 | Content_3)* }

  Squared_1[@name=Squared] { SquareOpen_1 ( notClose | range )+ ~a SquareClose }
  Squared_2[@name=Squared] { SquareOpen_2 ( notClose | range )+ ~a SquareClose }
  Squared_3[@name=Squared] { SquareOpen_3 ( notClose | range )+ ~a SquareClose }

  range[@dynamicPrecedence=1] { RangeOpen ~a Dash RangeClose }
  RangeOpen [closedBy=RangeClose] { notClose }
  RangeClose[openedBy=RangeOpen ] { notClose }
  notClose { Dash | Char }
}

@external tokens rawQuotedOpen from "./query.tokens" {
  RawQuoted1Open[closedBy=RawQuoted1Close,@name=Open],
  RawQuoted2Open[closedBy=RawQuoted2Close,@name=Open]
}

@external tokens rawHtmlOpen from "./query.tokens" {
  RawHtmlOpen[closedBy=RawHtmlClose,@name=Open]
}

@external tokens rawQuoted1Content from "./query.tokens" {
  RawQuoted1Content[@name=Content]
}

@external tokens rawQuoted2Content from "./query.tokens" {
  RawQuoted2Content[@name=Content]
}

@external tokens rawHtmlContent from "./query.tokens" {
  RawHtmlContent[@name=Content]
}

@external tokens rawQuoted1Close from "./query.tokens" {
  RawQuoted1Close[openedBy=RawQuoted1Open,@name=Close]
}

@external tokens rawQuoted2Close from "./query.tokens" {
  RawQuoted2Close[openedBy=RawQuoted2Open,@name=Close]
}

@external tokens rawHtmlClose from "./query.tokens" {
  RawHtmlClose[openedBy=RawHtmlOpen,@name=Close]
}

@tokens {
  // https://github.com/lezer-parser/javascript/blob/392c6115647c9e55c147ac2d702f75be127a7b2d/src/javascript.grammar#L683
  // Not exactly the same because we're more interested in correctness (than tokenization) https://github.com/lezer-parser/javascript/pull/31#issuecomment-2016585616
  Regex[isolate] { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ "/" $[dgimsuvy]* }

  // A SimpleString is any series of characters that is not percent, pound, caret, equals, less than, greater than, backtick, backslash, forwardslash, asterisk, underscore, comma, parentheses, colon, quote, doublequote, or whitespace (as defined by the Unicode standard)
  // If you change SimpleString, update 569040F1-5B10-4D97-8F7B-0D75D81E7688
  SimpleString { ( ![%#^=<>`\\/*_,():'"\u0009\u000A\u000B\u000C\u000D\u0020\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000] )+ }
  whitespace { @whitespace+ }
  Number { @digit+ }
  Date { @digit @digit @digit @digit "-" @digit? @digit "-" @digit? @digit }

  Not { "-" }
  @precedence { Date, Number, Not, SimpleString }
}

@external propSource queryHighlighting from "./query.highlight.js"
