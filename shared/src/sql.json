[
    "CREATE TABLE IF NOT EXISTS noteBase (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  templateId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  ankiNoteId INTEGER,\n  created INTEGER,\n  edited INTEGER\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS note AS\n  SELECT\n    rowid,\n    *,\n    (SELECT json_group_array(tag) FROM noteTag WHERE noteId = noteBase.id) AS tags,\n    (SELECT json_group_object(field, value) FROM noteFieldValue WHERE noteId = noteBase.id) AS fieldValues\n  FROM noteBase;",
    "CREATE VIEW IF NOT EXISTS noteWithTagCount AS\n  SELECT\n    *,\n    count(noteTag.tag) as tagCount\n  FROM note\n  LEFT JOIN noteTag on noteTag.noteId = note.id\n  GROUP BY note.rowid;",
    "CREATE TABLE IF NOT EXISTS noteTag (\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  tag TEXT,\n  PRIMARY KEY (noteId, tag)\n);",
    "CREATE VIEW IF NOT EXISTS distinctNoteTag AS\n  SELECT\n    MIN(rowid) AS rowid,\n    tag,\n    ftsNormalize(tag, 1, 1, 0) as normalized\n  FROM noteTag GROUP BY tag;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteTagFts USING fts5 (\n  tag,\n  normalized,\n  content=distinctNoteTag,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteTagFtsInstance USING fts5vocab(noteTagFts, instance);",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_insert AFTER INSERT ON noteTag BEGIN\n  INSERT INTO noteTagFts(            rowid, tag, normalized)\n                              SELECT rowid, tag, normalized\n                              FROM distinctNoteTag\n                              WHERE tag = new.tag\n                              AND NOT EXISTS (SELECT rowid FROM noteTagFtsInstance WHERE doc = new.rowid);",
    "-- noteTagFts is external content, so `select * from noteTagFts` will query the underlying view, distinctNoteTag. So to figure out if the tag's already in the index, we check the vocab table.\nEND;",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_delete AFTER DELETE ON noteTag BEGIN\n  DELETE FROM noteTagFts WHERE rowid = old.rowid;",
    "INSERT INTO noteTagFts(            rowid, tag, normalized)\n                              SELECT rowid, tag, normalized\n                              FROM distinctNoteTag\n                              WHERE tag = old.tag;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_update AFTER UPDATE ON noteTag BEGIN\n  SELECT RAISE(ABORT, 'Updates not supported - it''s just a join table.');",
    "END;",
    "CREATE TABLE IF NOT EXISTS noteFieldValue (\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  field TEXT,\n  value TEXT,\n  PRIMARY KEY (noteId, field)\n);",
    "CREATE VIEW IF NOT EXISTS distinctNoteField AS\n  SELECT\n    MIN(rowid) AS rowid,\n    field,\n    ftsNormalize(field, 1, 1, 0) AS normalized\n  FROM noteFieldValue\n  GROUP BY field;",
    "CREATE VIEW IF NOT EXISTS noteValueFtsView AS\n  SELECT\n    rowid,\n    value,\n    ftsNormalize(value, 1, 1, 0) AS normalized\n  FROM noteFieldValue;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteFieldFts USING fts5 (\n  field,\n  normalized,\n  content=distinctNoteField,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteValueFts USING fts5 (\n  value,\n  normalized,\n  content=noteValueFtsView,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteFieldFtsInstance USING fts5vocab(noteFieldFts, instance);",
    "CREATE TRIGGER IF NOT EXISTS noteFieldValue_after_insert AFTER INSERT ON noteFieldValue BEGIN\n  INSERT INTO noteFieldFts(              rowid, field,         normalized)\n                                  SELECT rowid, field, ftsNormalize(field, 1, 1, 0)\n                                  FROM distinctNoteField\n                                  WHERE field = new.field\n                                  AND NOT EXISTS (SELECT rowid FROM noteFieldFtsInstance WHERE doc = new.rowid);",
    "-- noteFieldFts is external content, so `select * from noteFieldFts` will query the underlying view, distinctNoteField. So to figure out if the field's already in the index, we check the vocab table.\n  INSERT INTO noteValueFts(    rowid,     value,              normalized)\n                    VALUES(new.rowid, new.value, ftsNormalize(new.value, 1, 1, 0));",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteFieldValue_after_delete AFTER DELETE ON noteFieldValue BEGIN\n  INSERT INTO noteFieldFts(noteFieldFts, rowid, field) VALUES('delete', old.rowid, old.field);",
    "INSERT INTO noteFieldFts(              rowid, field)\n                                  SELECT rowid, field\n                                  FROM distinctNoteField\n                                  WHERE field = old.field;",
    "DELETE FROM noteValueFts WHERE rowid = old.rowid;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteFieldValue_after_update AFTER UPDATE ON noteFieldValue BEGIN\n  DELETE FROM noteValueFts WHERE rowid = old.rowid;",
    "INSERT INTO noteValueFts(    rowid,     value,              normalized)\n                    VALUES(new.rowid, new.value, ftsNormalize(new.value, 1, 1, 0));",
    "END;",
    "CREATE INDEX IF NOT EXISTS noteBase_templateId_idx on noteBase(templateId);",
    "CREATE INDEX IF NOT EXISTS noteTag_tag_idx on noteTag(tag);",
    "CREATE INDEX IF NOT EXISTS noteFieldValue_field_idx on noteFieldValue(field);",
    "SELECT crsql_as_crr('noteBase');",
    "SELECT crsql_as_crr('noteTag');",
    "SELECT crsql_as_crr('noteFieldValue');",
    "CREATE TABLE IF NOT EXISTS cardBase (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  ord INTEGER,\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  created INTEGER,\n  edited INTEGER,\n  lapses INTEGER,\n  repCount INTEGER,\n  cardSettingId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  due INTEGER,\n  state INTEGER\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS card AS\n  SELECT\n    rowid,\n    *,\n    (SELECT json_group_array(tag) FROM cardTag WHERE cardId = cardBase.id) AS tags\n  FROM cardBase;",
    "CREATE VIEW IF NOT EXISTS cardWithTagCount AS\n  SELECT\n    *,\n    count(cardTag.tag) as tagCount\n  FROM card\n  LEFT JOIN cardTag on cardTag.cardId = card.id\n  GROUP BY card.rowid;",
    "CREATE TABLE IF NOT EXISTS cardTag (\n  cardId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  tag TEXT,\n  PRIMARY KEY (cardId, tag)\n);",
    "CREATE VIEW IF NOT EXISTS distinctCardTag AS\n  SELECT\n    MIN(rowid) AS rowid,\n    tag,\n    ftsNormalize(tag, 1, 1, 0) as normalized\n  FROM cardTag GROUP BY tag;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardTagFts USING fts5 (\n  tag,\n  normalized,\n  content=distinctCardTag,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardTagFtsInstance USING fts5vocab(cardTagFts, instance);",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_insert AFTER INSERT ON cardTag BEGIN\n  INSERT INTO cardTagFts(            rowid, tag, normalized)\n                              SELECT rowid, tag, normalized\n                              FROM distinctCardTag\n                              WHERE tag = new.tag\n                              AND NOT EXISTS (SELECT rowid FROM cardTagFtsInstance WHERE doc = new.rowid);",
    "-- cardTagFts is external content, so `select * from cardTagFts` will query the underlying view, distinctCardTag. So to figure out if the tag's already in the index, we check the vocab table.\nEND;",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_delete AFTER DELETE ON cardTag BEGIN\n  DELETE FROM cardTagFts WHERE rowid = old.rowid;",
    "INSERT INTO cardTagFts(            rowid, tag, normalized)\n                              SELECT rowid, tag, normalized\n                              FROM distinctCardTag\n                              WHERE tag = old.tag;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_update AFTER UPDATE ON cardTag BEGIN\n  SELECT RAISE(ABORT, 'Updates not supported - it''s just a join table.');",
    "END;",
    "CREATE INDEX IF NOT EXISTS cardBase_noteId_idx on cardBase(noteId);",
    "CREATE INDEX IF NOT EXISTS cardBase_created_idx on cardBase(created);",
    "CREATE INDEX IF NOT EXISTS cardBase_due_idx on cardBase(due);",
    "CREATE INDEX IF NOT EXISTS cardTag_tag_idx on cardTag(tag);",
    "SELECT crsql_as_crr('cardBase');",
    "CREATE TABLE IF NOT EXISTS settingBase (\n  id TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  key TEXT,\n  value,\n  PRIMARY KEY (id, key)\n);",
    "CREATE VIEW IF NOT EXISTS setting AS\n  SELECT\n    MIN(rowid) AS rowid,\n    id,\n    json_group_object(key, value) AS json\n  FROM settingBase GROUP BY id;",
    "CREATE TABLE IF NOT EXISTS cardSetting (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  name TEXT,\n  details TEXT\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS cardSettingName AS\n  SELECT rowid, name, ftsNormalize(name, 1, 1, 0) AS normalized FROM cardSetting;",
    "CREATE TABLE IF NOT EXISTS template (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  name TEXT,\n  css TEXT,\n  fields TEXT,\n  created INTEGER,\n  edited INTEGER,\n  templateType TEXT,\n  ankiId INTEGER\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS templateName AS\n  SELECT rowid, name, ftsNormalize(name, 1, 1, 0) AS normalized FROM template;",
    "CREATE TABLE IF NOT EXISTS remoteTemplate (\n  localId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  nook TEXT,\n  remoteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  uploadDate INTEGER,\n  PRIMARY KEY (localId, nook)\n) STRICT;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS templateNameFts USING fts5 (\n  name,\n  normalized,\n  content=templateName,\n  content_rowid=rowid,\n  tokenize='trigram'\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardSettingNameFts USING fts5 (\n  name,\n  normalized,\n  content=cardSettingName,\n  content_rowid=rowid,\n  tokenize='trigram'\n);",
    "CREATE TRIGGER IF NOT EXISTS template_after_insert AFTER INSERT ON template BEGIN\n  INSERT INTO templateNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS template_after_delete AFTER DELETE ON template BEGIN\n  INSERT INTO templateNameFts (templateNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS template_after_update AFTER UPDATE ON template BEGIN\n  INSERT INTO templateNameFts (templateNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "INSERT INTO templateNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_insert AFTER INSERT ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_delete AFTER DELETE ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (cardSettingNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_update AFTER UPDATE ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (cardSettingNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "INSERT INTO cardSettingNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TABLE IF NOT EXISTS remoteNote (\n  localId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  nook TEXT,\n  remoteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  uploadDate INTEGER,\n  PRIMARY KEY (localId, nook)\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS media (\n  id TEXT PRIMARY KEY, -- should stay TEXT!\n  created INTEGER,\n  edited INTEGER,\n  data BLOB,\n  hash BLOB\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS remoteMedia (\n  localEntityId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  i INTEGER,\n  localMediaId TEXT, -- should stay TEXT!\n  uploadDate INTEGER,\n  PRIMARY KEY (localEntityId, i)\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS plugin (\n  name TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  version TEXT,\n  dependencies TEXT,\n  created INTEGER,\n  edited INTEGER,\n  script BLOB\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS review (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  cardId TEXT,\n  created INTEGER,\n  rating INTEGER,\n  kind INTEGER,\n  details TEXT\n) STRICT;",
    "PRAGMA temp_store=MEMORY;",
    "-- grep 2790D3E0-F98B-4A95-8910-AC3E87F4F2D3\nCREATE INDEX IF NOT EXISTS review_cardId_idx on review(cardId);",
    "SELECT crsql_as_crr('template');",
    "SELECT crsql_as_crr('remoteTemplate');",
    "SELECT crsql_as_crr('remoteNote');",
    "SELECT crsql_as_crr('media');",
    "SELECT crsql_as_crr('remoteMedia');",
    "SELECT crsql_as_crr('plugin');"
]