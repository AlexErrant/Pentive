[
    "CREATE TABLE IF NOT EXISTS noteBase (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  templateId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  ankiNoteId INTEGER,\n  created INTEGER,\n  updated INTEGER,\n  fieldValues TEXT\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS note AS\n  SELECT\n    rowid,\n    *,\n    (SELECT json_array(tag) FROM notetag WHERE noteId = noteBase.id) AS tags\n    FROM noteBase;",
    "CREATE TABLE IF NOT EXISTS noteTag (\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  tag TEXT,\n  PRIMARY KEY (noteId, tag)\n);",
    "CREATE VIEW IF NOT EXISTS distinctNoteTag AS\n  SELECT MIN(rowid) AS rowid, tag FROM noteTag GROUP BY tag;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteTagFts USING fts5 (\n  tag,\n  content=distinctNoteTag,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteTagFtsInstance USING fts5vocab(noteTagFts, instance);",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_insert AFTER INSERT ON noteTag BEGIN\n  INSERT INTO noteTagFts(            rowid, tag)\n                              SELECT rowid, tag\n                              FROM distinctNoteTag\n                              WHERE tag = new.tag\n                              AND NOT EXISTS (SELECT rowid FROM noteTagFtsInstance WHERE doc = new.rowid LIMIT 1);",
    "-- noteTagFts is external content, so `select * from noteTagFts` will query the underlying view, distinctNoteTag. So to figure out if the tag's already in the index, we check the vocab table.\nEND;",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_delete AFTER DELETE ON noteTag BEGIN\n  INSERT INTO noteTagFts(noteTagFts, rowid, tag) VALUES('delete', old.rowid, old.tag);",
    "INSERT INTO noteTagFts(            rowid, tag)\n                              SELECT rowid, tag\n                              FROM distinctNoteTag\n                              WHERE tag = old.tag;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteTag_after_update AFTER UPDATE ON noteTag BEGIN\n  SELECT RAISE(ABORT, 'Updates not supported - it''s just a join table.');",
    "END;",
    "CREATE TABLE IF NOT EXISTS noteField (\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  field TEXT,\n  PRIMARY KEY (noteId, field)\n);",
    "CREATE VIEW IF NOT EXISTS noteFieldValue AS\n  SELECT\n    noteField.rowid,\n    field,\n    ftsNormalize(field) as normalizedField,\n                 json_extract(fieldValues, '$.' || field)  as value,\n    ftsNormalize(json_extract(fieldValues, '$.' || field)) as normalizedValue\n  FROM noteField\n  JOIN noteBase on noteBase.id = noteField.noteId;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS noteFvFts USING fts5 (\n  field,\n  value,\n  normalizedField,\n  normalizedValue,\n  content=noteFieldValue,\n  content_rowid=rowid,\n  tokenize='trigram'\n);",
    "CREATE TRIGGER IF NOT EXISTS noteBase_after_insert AFTER INSERT ON noteBase BEGIN\n  INSERT INTO noteField (noteId, field)\n    SELECT\n      new.id,\n      json_each.key\n    FROM json_each(new.fieldValues);",
    "INSERT INTO noteFvFts (rowid, field, normalizedField, value, normalizedValue)\n    SELECT\n      rowid,\n      field,\n      ftsNormalize(field),\n                   json_extract(new.fieldValues, '$.' || field),\n      ftsNormalize(json_extract(new.fieldValues, '$.' || field))\n    FROM noteField\n    WHERE noteField.noteId = new.id;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteBase_after_delete AFTER DELETE ON noteBase BEGIN\n  DELETE FROM noteFvFts WHERE rowid IN (SELECT rowid FROM noteField WHERE noteId = old.id);",
    "DELETE FROM noteField WHERE noteId = old.id;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS noteBase_after_update AFTER UPDATE ON noteBase BEGIN\n  REPLACE INTO noteField (noteId, field)\n    SELECT\n      new.id,\n      json_each.key\n    FROM json_each(new.fieldValues);",
    "REPLACE INTO noteFvFts (rowid, field, normalizedField, value, normalizedValue)\n    SELECT\n      rowid,\n      field,\n      ftsNormalize(field),\n                    json_extract(new.fieldValues, '$.' || field),\n      ftsNormalize(json_extract(new.fieldValues, '$.' || field))\n    FROM noteField\n    WHERE noteField.noteId = new.id;",
    "END;",
    "CREATE INDEX IF NOT EXISTS noteBase_templateId_idx on noteBase(templateId);",
    "SELECT crsql_as_crr('noteBase');",
    "SELECT crsql_as_crr('noteField');",
    "CREATE TABLE IF NOT EXISTS cardBase (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  ord INTEGER,\n  noteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  created INTEGER,\n  updated INTEGER,\n  cardSettingId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  due INTEGER,\n  state INTEGER\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS card AS\n  SELECT\n    rowid,\n    *,\n    (SELECT json_array(tag) FROM cardtag WHERE cardId = cardBase.id) AS tags\n    FROM cardBase;",
    "CREATE TABLE IF NOT EXISTS cardTag (\n  cardId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  tag TEXT,\n  PRIMARY KEY (cardId, tag)\n);",
    "CREATE VIEW IF NOT EXISTS distinctCardTag AS\n  SELECT MIN(rowid) AS rowid, tag FROM cardTag GROUP BY tag;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardTagFts USING fts5 (\n  tag,\n  content=distinctCardTag,\n  tokenize = \"trigram\"\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardTagFtsInstance USING fts5vocab(cardTagFts, instance);",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_insert AFTER INSERT ON cardTag BEGIN\n  INSERT INTO cardTagFts(            rowid, tag)\n                              SELECT rowid, tag\n                              FROM distinctCardTag\n                              WHERE tag = new.tag\n                              AND NOT EXISTS (SELECT rowid FROM cardTagFtsInstance WHERE doc = new.rowid LIMIT 1);",
    "-- cardTagFts is external content, so `select * from cardTagFts` will query the underlying view, distinctCardTag. So to figure out if the tag's already in the index, we check the vocab table.\nEND;",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_delete AFTER DELETE ON cardTag BEGIN\n  INSERT INTO cardTagFts(cardTagFts, rowid, tag) VALUES('delete', old.rowid, old.tag);",
    "INSERT INTO cardTagFts(            rowid, tag)\n                              SELECT rowid, tag\n                              FROM distinctCardTag\n                              WHERE tag = old.tag;",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardTag_after_update AFTER UPDATE ON cardTag BEGIN\n  SELECT RAISE(ABORT, 'Updates not supported - it''s just a join table.');",
    "END;",
    "CREATE INDEX IF NOT EXISTS cardBase_noteId_idx on cardBase(noteId);",
    "CREATE INDEX IF NOT EXISTS cardBase_created_idx on cardBase(created);",
    "CREATE INDEX IF NOT EXISTS cardBase_due_idx on cardBase(due);",
    "SELECT crsql_as_crr('cardBase');",
    "CREATE TABLE IF NOT EXISTS cardSetting (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  name TEXT,\n  details TEXT\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS cardSettingName AS\n  SELECT rowid, name, ftsNormalize(name) AS normalized FROM cardSetting;",
    "CREATE TABLE IF NOT EXISTS template (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  name TEXT,\n  css TEXT,\n  fields TEXT,\n  created INTEGER,\n  updated INTEGER,\n  templateType TEXT,\n  ankiId INTEGER\n) STRICT;",
    "CREATE VIEW IF NOT EXISTS templateName AS\n  SELECT rowid, name, ftsNormalize(name) AS normalized FROM template;",
    "CREATE TABLE IF NOT EXISTS remoteTemplate (\n  localId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  nook TEXT,\n  remoteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  uploadDate INTEGER,\n  PRIMARY KEY (localId, nook)\n) STRICT;",
    "CREATE VIRTUAL TABLE IF NOT EXISTS templateNameFts USING fts5 (\n  name,\n  normalized,\n  content=templateName,\n  content_rowid=rowid,\n  tokenize='trigram'\n);",
    "CREATE VIRTUAL TABLE IF NOT EXISTS cardSettingNameFts USING fts5 (\n  name,\n  normalized,\n  content=cardSettingName,\n  content_rowid=rowid,\n  tokenize='trigram'\n);",
    "CREATE TRIGGER IF NOT EXISTS template_after_insert AFTER INSERT ON template BEGIN\n  INSERT INTO templateNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS template_after_delete AFTER DELETE ON template BEGIN\n  INSERT INTO templateNameFts (templateNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS template_after_update AFTER UPDATE ON template BEGIN\n  INSERT INTO templateNameFts (templateNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "INSERT INTO templateNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_insert AFTER INSERT ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_delete AFTER DELETE ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (cardSettingNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "END;",
    "CREATE TRIGGER IF NOT EXISTS cardSetting_after_update AFTER UPDATE ON cardSetting BEGIN\n  INSERT INTO cardSettingNameFts (cardSettingNameFts, rowid, name) VALUES('delete', old.rowid, old.name);",
    "INSERT INTO cardSettingNameFts (rowid, name) VALUES (new.rowid, new.name);",
    "END;",
    "CREATE TABLE IF NOT EXISTS remoteNote (\n  localId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  nook TEXT,\n  remoteId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  uploadDate INTEGER,\n  PRIMARY KEY (localId, nook)\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS media (\n  id TEXT PRIMARY KEY, -- should stay TEXT!\n  created INTEGER,\n  updated INTEGER,\n  data BLOB,\n  hash BLOB\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS remoteMedia (\n  localEntityId TEXT, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  i INTEGER,\n  localMediaId TEXT, -- should stay TEXT!\n  uploadDate INTEGER,\n  PRIMARY KEY (localEntityId, i)\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS plugin (\n  name TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  version TEXT,\n  dependencies TEXT,\n  created INTEGER,\n  updated INTEGER,\n  script BLOB\n) STRICT;",
    "CREATE TABLE IF NOT EXISTS review (\n  id TEXT PRIMARY KEY, -- make BLOB upon SQLite v3.41 and the landing of UNHEX https://sqlite.org/forum/forumpost/30cca4e613d2fa2a grep F235B7FB-8CEA-4AE2-99CC-2790E607B1EB\n  cardId TEXT,\n  created INTEGER,\n  rating INTEGER,\n  kind INTEGER,\n  details TEXT\n) STRICT;",
    "PRAGMA temp_store=MEMORY;",
    "-- grep 2790D3E0-F98B-4A95-8910-AC3E87F4F2D3\nCREATE INDEX IF NOT EXISTS review_cardId_idx on review(cardId);",
    "SELECT crsql_as_crr('template');",
    "SELECT crsql_as_crr('remoteTemplate');",
    "SELECT crsql_as_crr('remoteNote');",
    "SELECT crsql_as_crr('media');",
    "SELECT crsql_as_crr('remoteMedia');",
    "SELECT crsql_as_crr('plugin');"
]