// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("planetscaleDbUrl")
  relationMode = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model User {
  id                    String               @id @db.VarChar(21) // lowercase
  displayName           String               @db.VarChar(21) // cased as user input
  createdAt             DateTime             @default(now())
  templateHistory       TemplateHistory[]
  templateComments      TemplateComment[]
  templateSubscriptions TemplateSubscriber[]
  notes                 Note[]
  noteComments          NoteComment[]
  noteSubscriptions     NoteSubscriber[]
  posts                 Post[]
  postComments          PostComment[]
  postSubscriptions     PostSubscriber[]
}

model Template {
  id          Bytes                @id @db.Binary(16)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  name        String               @db.VarChar(255)
  nook        String               @db.VarChar(21)
  nookRef     Nook                 @relation(fields: [nook], references: [id])
  type        String               @db.Text // medTODO compress
  fields      String               @db.Text // medTODO compress
  css         String               @db.Text // medTODO compress
  history     TemplateHistory[]
  comments    TemplateComment[]
  ankiId      BigInt?              @db.UnsignedBigInt // should be its own table
  subscribers TemplateSubscriber[]
  notes       Note[]

  @@index([ankiId])
  @@index([nook])
}

model TemplateComment {
  id         Bytes    @id @db.Binary(16)
  parentId   Bytes?   @db.Binary(16)
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  text       String   @db.Text
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.VarChar(21)
  history    String?  @db.Text
  votes      String   @db.Text
  level      Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([templateId])
}

model TemplateSubscriber {
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  userId     String   @db.VarChar(21)
  user       User     @relation(fields: [userId], references: [id])
  til        DateTime @default(now())

  @@id([templateId, userId])
  @@index([templateId])
  @@index([userId])
}

model TemplateHistory {
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())

  name     String? @db.VarChar(255)
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @db.VarChar(21)
  type     String? @db.VarChar(21)
  fields   String? @db.Text
  css      String? @db.Text

  @@id([templateId, createdAt])
  @@index([templateId])
  @@index([authorId])
}

model Note {
  id          Bytes    @id @db.Binary(16)
  templateId  Bytes    @db.Binary(16)
  template    Template @relation(fields: [templateId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.VarChar(21)
  fieldValues String   @db.Text // medTODO compress
  fts         String   @db.Text
  tags        String   @db.Text

  history     NoteHistory[]
  comments    NoteComment[]
  ankiId      BigInt?          @db.UnsignedBigInt // should be its own table
  subscribers NoteSubscriber[]

  @@index([authorId])
  @@index([ankiId])
  @@index([templateId])
  @@fulltext([fts])
}

model NoteComment {
  id        Bytes    @id @db.Binary(16)
  parentId  Bytes?   @db.Binary(16)
  noteId    Bytes    @db.Binary(16)
  note      Note     @relation(fields: [noteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.VarChar(21)
  history   String?  @db.Text
  votes     String   @db.Text
  level     Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([noteId])
}

model NoteSubscriber {
  noteId Bytes    @db.Binary(16)
  note   Note     @relation(fields: [noteId], references: [id])
  userId String   @db.VarChar(21)
  user   User     @relation(fields: [userId], references: [id])
  til    DateTime @default(now())

  @@id([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

model NoteHistory {
  noteId    Bytes    @db.Binary(16)
  note      Note     @relation(fields: [noteId], references: [id])
  createdAt DateTime @default(now())

  templateId  Bytes? @db.Binary(16)
  fieldValues String @db.Text
  tags        String @db.Text

  @@id([noteId, createdAt])
  @@index([noteId])
}

model Media_User {
  mediaHash Bytes  @db.Binary(32)
  userId    String @db.VarChar(21)

  @@id([mediaHash, userId])
  @@index([mediaHash])
}

model Media_Entity {
  entityId  Bytes @db.Binary(16) // e.g. template, note, or comment that refers to said media
  i         Int   @db.UnsignedTinyInt
  mediaHash Bytes @db.Binary(32)

  @@id([entityId, i])
  @@index([mediaHash])
}

model Nook {
  id          String     @id @db.VarChar(21) // lowercase
  displayName String     @db.VarChar(21) // cased as user input
  createdAt   DateTime   @default(now())
  templates   Template[]
  posts       Post[]
  moderators  String     @db.Text
}

model Post {
  id          Bytes            @id @db.Binary(16)
  title       String           @db.VarChar(255)
  text        String           @db.Text
  nook        String           @db.VarChar(21)
  nookRef     Nook             @relation(fields: [nook], references: [id])
  author      User             @relation(fields: [authorId], references: [id])
  authorId    String           @db.VarChar(21)
  comments    PostComment[]
  subscribers PostSubscriber[]

  @@index([authorId])
  @@index([nook])
}

model PostComment {
  id        Bytes    @id @db.Binary(16)
  parentId  Bytes?   @db.Binary(16)
  postId    Bytes    @db.Binary(16)
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.VarChar(21)
  history   String?  @db.Text
  votes     String   @db.Text
  level     Int      @db.UnsignedTinyInt

  @@index([authorId])
  @@index([postId])
}

model PostSubscriber {
  postId Bytes    @db.Binary(16)
  post   Post     @relation(fields: [postId], references: [id])
  userId String   @db.VarChar(21)
  user   User     @relation(fields: [userId], references: [id])
  til    DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}
