// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("planetscaleDbUrl")
  relationMode = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model User {
  id                    String               @id @db.VarChar(21) // lowercase // highTODO test increasing the length
  displayName           String               @db.VarChar(21) // cased as user input
  createdAt             DateTime             @default(now())
  templates             Template[]
  templateComments      TemplateComment[]
  templateSubscriptions TemplateSubscriber[]
  notes                 Note[]
  noteSubscriptions     Note[]               @relation("Note_Subscribers")
}

model Template {
  id             Bytes                @id @db.Binary(16)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  name           String               @db.VarChar(255)
  nook           String               @db.VarChar(21)
  author         User                 @relation(fields: [authorId], references: [id])
  authorId       String               @db.VarChar(21)
  type           String               @db.VarChar(21)
  fields         String               @db.Text
  css            String               @db.Text
  childTemplates String               @db.Text
  history        TemplateHistory[]
  comments       TemplateComment[]
  ankiId         BigInt?              @db.UnsignedBigInt // should be its own table
  subscribers    TemplateSubscriber[]
  Note           Note[]

  @@index([authorId]) // do we need this? it's never gonna be used...
  @@index([ankiId])
}

model TemplateComment {
  id         Bytes    @id @db.Binary(16)
  parentId   Bytes?   @db.Binary(16)
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  text       String   @db.Text
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.VarChar(21)
  history    String?  @db.Text
  votes      String   @db.Text

  @@index([authorId])
  @@index([templateId])
}

model TemplateSubscriber {
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  userId     String   @db.VarChar(21)
  user       User     @relation(fields: [userId], references: [id])
  til        DateTime

  @@id([templateId, userId])
  @@index([templateId])
  @@index([userId])
}

model TemplateHistory {
  templateId Bytes    @db.Binary(16)
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())

  name           String? @db.VarChar(255)
  nook           String? @db.VarChar(21)
  // author         User?   @relation(fields: [authorId], references: [id]) // no query patterns need this... yet
  authorId       String? @db.VarChar(21)
  type           String? @db.VarChar(21)
  fields         String? @db.Text
  css            String? @db.Text
  childTemplates String? @db.Text

  @@id([templateId, createdAt])
  @@index([templateId])
}

model Note {
  id          Bytes    @id @db.Binary(16)
  templateId  Bytes    @db.Binary(16)
  template    Template @relation(fields: [templateId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nook        String   @db.VarChar(21)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.VarChar(21)
  fieldValues String   @db.Text
  fts         String   @db.Text
  tags        String   @db.Text

  // history        String   @db.Text
  // comments       String   @db.Text
  ankiId      BigInt? @db.UnsignedBigInt // should be its own table
  subscribers User[]  @relation("Note_Subscribers")

  @@index([authorId])
  @@index([ankiId])
  @@index([templateId])
  @@fulltext([fts])
}

model Media_User {
  mediaId Bytes  @db.Binary(32)
  userId  String @db.VarChar(21)

  @@id([mediaId, userId])
}
